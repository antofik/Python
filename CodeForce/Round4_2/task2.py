# coding=utf-8
"""
B. Перед экзаменом
ограничение по времени на тест:1 second
ограничение по памяти на тест:64 megabytes
ввод:standard input
вывод:standard output

Завтра у Пети экзамен по биологии. Он очень не любит этот предмет, но d дней назад узнал, что все-таки придется его
сдавать. Строгие родители сразу же наказали Пете заниматься подготовкой, и при этом не менее чем minTimei и не более
чем maxTimei часов в i-ый день. К тому же они предупредили Петю, что за день до экзамена проверят, как он следовал их
указанию.

И вот именно сегодня родители требуют от Пети расписание его занятий. Однако мальчик подсчитал лишь суммарное число
часов sumTime, затраченное им на подготовку. Теперь он хочет узнать, удастся ли ему предоставить родителям список
sсhedule из d целых чисел, в котором каждое число sсhedulei означает время в часах, проведенное Петей в i-ый день
за изучением биологии. Числа должны удовлетворять ограничениям родителей, а сумма всех schedulei должна быть в точности
равна sumTime.
Входные данные

В первой строке входных данных заданы два целых числа d, sumTime (1 ≤ d ≤ 30, 0 ≤ sumTime ≤ 240) — количество дней, в
течение которых занимался Петя и общее количество часов, затраченных на подготовку. В следующих d строках содержится
по два целых числа minTimei, maxTimei (0 ≤ minTimei ≤ maxTimei ≤ 8), записанных через пробел — минимальное и максимальное
число часов, которое Петя мог потратить в i-ый день.
Выходные данные

Выведите в первую строку YES, а во вторую d целых чисел через пробелы, каждое из которых — число часов, потраченных
Петей на подготовку в соответствующий день. Если искомый список составить невозможно, то выведите NO в единственную
строку выходных данных. Если решений несколько, выведите любое."""
from sys import stdin, exit


def task():
    d, s = map(int, stdin.readline().split())
    values = [(int(x), int(y)) for x, y in map(str.split, stdin.readlines())]

    lower = sum([l for l, u in values])
    upper = sum([u for l, u in values])

    if s > upper or s < lower:
        print 'NO'
        exit()

    result = []
    delta = s - lower
    for l, u in values:
        if delta == 0:
            result.append(l)
        else:
            d = min(u - l, delta)
            delta -= d
            result.append(l + d)

    print 'YES'
    print ' '.join(map(str, result))

task()
