# coding=utf-8
"""
A. Разговоры в Spyke
ограничение по времени на тест:2 секунды
ограничение по памяти на тест:256 мегабайт
ввод:standard input
вывод:standard output

Поликарп — директор большой корпорации. В этой корпорации работает n секретарей, каждый из которых пользуется известной VoIP-системой Spyke для ведения переговоров в течение рабочего дня. Известно, что, когда два человека устанавливают телефонное соединение Spyke, сеть Spyke присваивает этому разговору уникальный идентификационный номер (целое положительное число) — номер сессии.

Как-то раз Поликарп захотел узнать, кто из секретарей разговаривает по Spyke, а кто — нет. Он выписал для каждого секретаря номер сессии его разговора, или 0, если этот секретарь сейчас не разговаривает по Spyke.

Помогите Поликарпу по этим данным определить, сколько пар секретарей сейчас ведут разговор между собой. Если в данные Поликарпа закралась ошибка, и описанная ситуация никак не могла произойти, требуется сообщить об этом.

Обратите внимание, секретари могут разговаривать по Spyke не только друг с другом — возможны разговоры с внешними собеседниками. Также не разрешены конференции Spyke — то есть в каждом разговоре должны участвовать ровно два собеседника.
Входные данные

В первой строке записано целое число n (1 ≤ n ≤ 103) — количество секретарей в корпорации Поликарпа. В следующей строке записаны n целых чисел через пробел: id1, id2, ..., idn (0 ≤ idi ≤ 109). Число idi равно номеру сессии разговора секретаря номер i, если он разговаривает в данный момент по Spyke, или равно нулю, в противном случае.

Считайте, что секретари пронумерованы от 1 до n некоторым образом.
Выходные данные

Выведите единственное целое число — количество пар секретарей, которые ведут разговор между собой, или -1, если в данные Поликарпа закралась ошибка, и описанная ситуация никак не могла произойти.
"""
from sys import stdin, exit


def task():
    try:
        count = int(stdin.readline())
        if count <= 0 or count > 1000:
            raise Exception("Invalid count")
        sessions = stdin.readline().split(' ')
        if count != len(sessions):
            raise Exception("Count doesn't match actual amount of sessions")

        one = set()
        two = set()
        for session in sessions:
            i = int(session)
            #print 'analyzing %s' % i
            if i == 0:
                #print 'skipping'
                continue
            if i in two:
                #print 'triple - raising exception'
                raise Exception("Conference is not allowed")
            if i in one:
                #print 'moving to two'
                one.remove(i)
                two.add(i)
            else:
                #print 'adding to one'
                one.add(i)

                #print 'one=%s\ntwo=%s' % (one, two)

        print len(two)
    except Exception, e:
        #print str(e)
        print -1


task()

